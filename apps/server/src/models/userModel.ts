import { ObjectId } from 'mongodb';
import { UserType } from './userTypeModel';
import { isValidEmail } from '../utils/email';

export const USER_COLLECTION = 'Users';

// Base interface for user data without MongoDB-specific fields
export interface IUserData {
  username: string;
  email: string;
  name: string;
  password: string;
  sex: string;
  birthDate: Date;
  userType?: UserType;
  isDeleted?: boolean;
  deletedAt?: Date;
  deletedBy?: string;
}

// Interface for creating a new user
export interface ICreateUser extends IUserData {
  createdAt: Date;
  updatedAt: Date;
}

// Full user interface including MongoDB fields
export interface IUser extends ICreateUser {
  _id?: ObjectId; // Optional because it's generated by MongoDB
}

// Full user interface including MongoDB fields
export interface IGraphQLUser extends Omit<ICreateUser, 'birthDate'> {
  id: string;
  birthDate: string;
}

// Optional: Add validation functions
export const validateUser = (data: Partial<IUserData>) => {
  const errors: string[] = [];

  if (data.username !== undefined) {
    if (!data.username) {
      errors.push('Username is required');
    } else if (!isValidEmail(data.username)) {
      errors.push('Invalid username format');
    }
  }

  if (data.email !== undefined) {
    if (!data.email) {
      errors.push('Email is required');
    } else if (!isValidEmail(data.email)) {
      errors.push('Invalid email format');
    }
  }

  if (data.name !== undefined && data.name.length > 99) {
    errors.push('Name must be less than 100 characters');
  }

  if (
    data.userType !== undefined &&
    Object.values(UserType).includes(data.userType)
  ) {
    errors.push('The userType chosen does not exist');
  }

  return errors;
};

export const USER_INDEXES = [
  { key: { username: 1 }, unique: true },
  { key: { email: 1 }, unique: true },
  { key: { createdAt: 1 } },
] as const;
